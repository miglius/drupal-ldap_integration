<?php
// $Id$

define(LDAP_PERM_SEARCH, 'perform ldap searches');
define(LDAP_DEFAULT_PATTERN, '/(\S+)@(\S+)\.(\S+)/i');
define(LDAP_DEFAULT_REPLACEMENT, 'uid=$1,dc=$2,dc=$3');
define(LDAP_PASSWORDS_SECRET_KEY, 'change this key to any secret string you wish');
define(LDAP_SETTINGS_GROUP_STRING, 'LDAP attributes');
define(LDAP_USER_DATA_EDIT_TAB, 'LDAP user data');
define(LDAP_CATEGORY_USER_DATA, 'ldap_user_data');

/*
 * Edit this list so that all attributes that you might wish to show
 * are included. You may then enable/disable attributes in the Admin page.
 *
 * The left hand element indicates the LDAP attribute name.
 *
 * The 1st right hand elements in the array determine how the attribute and
 * its value are displayed. The first element may be 'text', 'image', or 'url'.
 */

$GLOBALS["ldap_attributes"] = array(
  "givenName"     => array("text", "textfield", t("First Name"), 64, 64),
  "initials"      => array("text", "textfield", t("Initial"), 64, 4, t("Your middle initial.")),      
  "sn"            => array("text", "textfield", t("Last Name"), 64, 64), //aka Surname
  "cn"            => array("text", "textfield", t("Common Name"), 64, 64),      
  "displayName"   => array("text", "textfield", t("Display Name"), 64, 64),      
  "mail"          => array("mailto", "textfield", t("Email"), 64, 64, ""),      
  "description"   => array("text", "textfield", t("Description"), 64, 64, ""),            
  "postOfficeBox" => array("text", "textfield", t("P.O. Box"), 64, 64),      
  "streetaddress" => array("text", "textfield", t("Address"), 64, 64),
  "l"             => array("text", "textfield", t("City"), 64, 64, t("Your city or other location")),
  "st"            => array("text", "textfield", t("State"), 4, 2, t("Your state or province")),
  "postalCode"    => array("text", "textfield", t("Postal Code"), 7, 5, t("Your Zip or Postal code")),
  "co"            => array("text", "textfield", t("Country"), 64, 64, t("Country or region")),  
  "company"       => array("text", "textfield", t("Company"), 12, 12, "Company or organization"),
  "title"         => array("text", "textfield", t("Title"), 12, 12),
  "department"    => array("text", "textfield", t("Department"), 64, 64),
  "physicalDeliveryOfficeName" => array("text", "textfield", t("Office"), 64, 64, ""),      
  "homephone"     => array("text", "textfield", t("Home Phone"), 64, 64, ""),
  "mobile"        => array("text", "textfield", t("Mobile Phone"), 64, 64, ""),
  "otherTelephone" => array("text", "textfield", t("Other Phone"), 64, 64, ""),
  "wWWHomePage"   => array("image", "textfield", t("Web Page"), 64, 64, ""),
  "url"           => array("link", "textfield", t("Other web pages"), 64, 64, ""),
  "roomNumber"    => array("text", "textfield", t("Office Location"), 64, 64, ""),
  "telephoneNumber" => array("text", "textfield", t("Office Phone"), 64, 64, ""),
        
  // examples of displaying attributes in Select menus or TextArea boxes. Helpful for composing search queries      
  "gender"        => array("text", "select", t("Gender"), array(0 => "-", "m" => t("male"), "f" => t("female")), "Pick a gender", 0, 0),      
  "publickey"     => array("text", "textarea", t("Public key"), 64, 4, ""));


/*********************************
 *       1. Drupal hooks         *
 *********************************/

function ldap_integration_help($section) {
  $output = '';

  switch ($section) {
    case 'admin/modules#ldap_integration':
      $output = 'ldap_integration';
      break;
    case 'admin/modules#description':
    case 'admin/help#ldap_integration':
      $output = t('Enables authentication via LDAP');
      break;
    case 'user/help#ldap_integration':
      $output = t('<p>If you are registered in %org LDAP directory, you\'ll probably be able to login this site by using your LDAP login and password</p>', array('%org' => variable_get('ldap_org_name', '')));
      break;
  }

  return $output;
}

function ldap_integration_settings() {
  
  $output .= form_textfield(t('Organisation name'), 'ldap_org_name', variable_get('ldap_org_name', ''), 100, 255, t('Name of the organisation the LDAP directory belongs to.'));
  $output .= form_textfield(t('LDAP server'), 'ldap_server', variable_get('ldap_server', 'localhost'), 100, 255, t('The domain name or IP address of your LDAP Server.'));
  $output .= form_textfield(t('LDAP port'), 'ldap_port', variable_get('ldap_port', 389), 100, 255, t('The TCP/IP port on the above server which accepts LDAP connections. Must be an integer.'));
  $output .= form_textfield(t('LDAP DN'), 'ldap_dn', variable_get('ldap_dn', ''), 100, 255, t('The <a href="http://www.php.net/manual/en/ref.ldap.php">Distinguished Name</a> corresponding to the <b>Users</b> section of your LDAP directory. For a Windows 2000 Active Directory, your DN should like similar to <b>cn=Users, dc=[sitename], dc=[sitesuffix]</b>. Substitute your own values for [sitename] and [sitesuffix]. Sitename is usually your company name and sitesuffix is usually \'com\' or \'net\' or \'org\''));
  $output .= form_textfield(t('LDAP filter'), 'ldap_filter', variable_get('ldap_filter', ''), 100, 255, t('The LDAP filter for selecting a given user from all Users. For Active Directory, usually use <b>sAMAccountName=%username</b>.'));
  $output .= form_textfield(t('LDAP login pattern'), 'ldap_login_pattern', variable_get('ldap_login_pattern', LDAP_DEFAULT_PATTERN), 100, 255, t('Regular expression matching logins for this module, that will be in the form of an e-mail address. <i>Example: ' . LDAP_DEFAULT_PATTERN . '</i>.'));
  $output .= form_textfield(t('LDAP login replacement'), 'ldap_login_replacement', variable_get('ldap_login_replacement', LDAP_DEFAULT_REPLACEMENT), 100, 255, t('Replacement to convert the above regular expression into the user\'s LDAP DN. <i>Example: ' . LDAP_DEFAULT_REPLACEMENT . '</i>.'));

  global $ldap_attributes;
  if (!$ldap_attributes) {
    ldap_integration_attributes();
  }

  foreach ($ldap_attributes as $key => $field) {
    $fields[$key] = $field[2];
  }
  
  $output .= form_select(t('Attributes displayed on search results page'), 'ldap_resultslist_attributes', variable_get('ldap_resultslist_attributes', array()), $fields, t('Select the attributes which will be displayed on Search Results page. This list should be brief (4 attributes or so). You may add attributes to this list by editing the relevant global variable at the beginning of the module\'s code'), 'size="6"', 1);
  $output .= form_select(t('Attributes displayed on user pages'), 'ldap_user_attributes', variable_get('ldap_user_attributes', array()), $fields, t('Select the attributes which will be displayed on user pages. Blank attributes will be omitted. You may add attributes to this list by editing the relevant global variable at the beginning of the module\'s code'), 'size="6"', 1);
  $output .= form_select(t('Attributes that can be edited by users'), 'ldap_useredit_attributes', variable_get('ldap_useredit_attributes', array()), $fields, t('Select the attributes users will be able to edit on their user pages. Blank attributes will be omitted. You may add attributes to this list by editing the relevant global variable at the beginning of the module\'s code'), 'size="6"', 1);

  return $output;
}

function ldap_integration_perm() {
  return array(LDAP_PERM_SEARCH);
}

function ldap_integration_block($op = 'list', $delta = 0) {
  global $user;
  
  if ($op == 'list') {
    $block[0]['info'] = t('Search users via LDAP');
  }
  else {
    if (user_access(LDAP_PERM_SEARCH)) {
      $block['subject'] = t('Search Users');
      $block['content'] = theme('ldap_integration_search_form');
    }
  }
  return $block;
}

function ldap_integration_info($field = NULL) {
  $info['name'] = t('%org LDAP directory', array('%org' => variable_get('ldap_org_name', '')));
  $info['protocol'] = 'LDAP';

  if ($field) {
    return $info[$field];
  }
  else {
    return $info;
  }
}

function ldap_integration_auth($name, $pass, $server) {
  global $user, $ldap_migrate;
  global $ldap_attributes;

  if (!$ldap_attributes) {
    ldap_integration_attributes();
  }  

  $dn = _ldap_integration_login2dn("$name@$server");
    
  if (!$con = _ldap_integration_init($dn, $pass)) {
    return 0;
  }

  _ldap_integration_save_pass($pass);
    
  return 1;
}

function ldap_integration_menu($may_cache) {
  $items = array();
  
  if ($may_cache) {
    $items[] = array(
      'path' => 'ldap_integration/query',
      'title' => t('LDAP query'),
      'callback' => 'ldap_integration_query_callback',
      'access' => true,
      'type' => MENU_CALLBACK );    
  }
  
  return $items;
}

function ldap_integration_user($op, &$edit, &$user, $category) {
  switch($op) {
    case 'categories':
      return array(array('name' => LDAP_CATEGORY_USER_DATA, 'title' => t(LDAP_USER_DATA_EDIT_TAB), 'weight' => 10));
    case 'form':
      return ldap_integration_user_form($category);
    case 'update':
      ldap_integration_user_update($category, $edit);
      break;
    case 'validate':
      break;
    case 'view':
      return ldap_integration_user_view();
  }
}

/*********************************
 *     2. Delegate functions     *
 *********************************/

function ldap_integration_user_form($category) {
  global $user, $ldap_attributes;

  if ($category != LDAP_CATEGORY_USER_DATA) {
    return null;
  }
  
  if (!variable_get('ldap_useredit_attributes', array())) {
    return null;
  }
  
  if (!$con = _ldap_integration_init()) {
    return '';
  }
  
  $dn = _ldap_integration_login2dn($user->name);
  $result = ldap_read($con, $dn, "objectClass=*");
  $entries = ldap_get_entries($con, $result);
  $entry = $entries[0];
  
  
  $attributes = variable_get('ldap_useredit_attributes', array());
  $output = '';
  foreach($attributes as $attribute) {
    $attr_info = $ldap_attributes[$attribute];
    array_shift($attr_info);
    $value = $entry[$attribute][0];
    $output .= _ldap_integration_attribute_form($attribute, $value, $attr_info);
  }
  $element = array(
    'title' => t(LDAP_SETTINGS_GROUP_STRING),
    'data' => $output,
    'weight' => 0);
  $ret = array($element);
  
  return $ret;
}

function ldap_integration_user_update($category, &$edit) {
  global $user;
  
  if (!$con = _ldap_integration_init()) {
    return '';
  }
  
  $dn = _ldap_integration_login2dn($user->name);
  
  if ($category != LDAP_CATEGORY_USER_DATA) {
    return null;
  }
  
  $writeout = array();
  $editables = variable_get('ldap_useredit_attributes', array());
  
  foreach($edit as $edit_attr => $edit_val) {
    // Preventing a POST data injection: we check allowance to write value
    if (array_search($edit_attr, $editables) !== FALSE) {
      $writeout[$edit_attr] = $edit_val;
      $edit[$edit_attr] = null;
    }
  }

  if ($writeout) {
    ldap_modify($con, $dn, $writeout);
  }
}

function ldap_integration_user_view() {
  global $user;
    
  if (!$con = _ldap_integration_init()) {
    return '';
  }
  
  $dn = _ldap_integration_login2dn($user->name);
  $result = ldap_read($con, $dn, "objectClass=*");
  $entries = ldap_get_entries($con, $result);
  $entry = $entries[0];
  
  $ret = array();
  $attributes = variable_get('ldap_user_attributes', array());
  foreach($attributes as $attribute) {
    $ret[$attribute] = $entry[$attribute][0];
  }
  
  return $ret;
}

/*********************************
 *         3. Callbacks          *
 *********************************/

function ldap_integration_query_callback() {
  if($_POST['edit']) {
    print(theme('page', _ldap_integration_query($_POST['edit'])));
  }
}

/*********************************
 *     4. Auxiliary functions    *
 *********************************/

// $name and $pass only provided during login. usually these are retrieved from the user's data field
function _ldap_integration_init($dn = '', $pass = '') {
  global $user;

  ldap_set_option($connect, LDAP_OPT_PROTOCOL_VERSION, 3);
  
  $server = variable_get('ldap_server', 'localhost');
  $port = variable_get('ldap_port', '381');
  if (!$con = ldap_connect($server, $port)) {
    watchdog('user', "LDAP Connect failure to $server:$port");
    return false;
  }
  
  if (!$dn) {
    $dn = _ldap_integration_login2dn($user->name);
  }

  if (!$pass) {
    $pass = _ldap_integration_retrieve_pass();
  }

  //die('con: ' . $con . ', dn: ' . $dn . ', pass: ' . $pass . ', server: ' . $server . ', port: ' . $port);
  if (!$res = @ldap_bind($con, $dn, $pass)) { 
    watchdog('user', 'LDAP Bind failure for $name. '. ldap_errno($con)  . ': ' . ldap_error($con));
    return false;
  }
  
  // success!
  return $con;
}

function _ldap_integration_query($edit) {
  global $user;
  
  if (!$con = _ldap_integration_init()) {
    // TODO: some error reporting
    return '';
  }

  $tmp = @preg_split('/@/', $user->name);
  $username = $tmp[0];
  $searchstring = $edit['ldap_searchstring'];
  
  $filter = strtr(variable_get('ldap_filter', ''), array('%username' => $username, '%searchstring' => $searchstring));
  $dn = variable_get('ldap_dn', '');
  if ($lres = ldap_search($con, $dn, $filter)) {
    $results = ldap_get_entries($con, $lres);
    if (!$results['count']) {
      drupal_set_message(t('Sorry - no users match your search.'), 'error');
      $output = '';
    } else {
      $output = theme('ldap_integration_results_list', $results);
    }
  }
  ldap_close($con);

  return $output;  
}

function _ldap_integration_crypt_init() {
  $key = LDAP_PASSWORDS_SECRET_KEY;
  
  // Open module, and create IV
  $td = mcrypt_module_open ("des", "", "ecb", "");
  $key = substr ($key, 0, mcrypt_enc_get_key_size ($td));
  $iv_size = mcrypt_enc_get_iv_size ($td);
  $iv = mcrypt_create_iv ($iv_size, MCRYPT_RAND);

  // Initialize encryption handle
  if (mcrypt_generic_init($td, $key, $iv) != -1) {
    return $td;
  }
  else {
    watchdog("error", "ldap encryption initialization error");
  }
}

function _ldap_integration_encrypt($input) {
  if (function_exists(mcrypt_generic)) {
    $td = _ldap_integration_crypt_init();
    $output = base64_encode(mcrypt_generic ($td, trim($input)));
    mcrypt_generic_deinit($td);
  }
  else {  
    $output = $input; 
  }

  return $output;
}

function _ldap_integration_decrypt($input) {
  if (function_exists(mcrypt_generic)) {
    $td = _ldap_integration_crypt_init();
    $output = trim(mdecrypt_generic($td, base64_decode($input)));
  }
  else {  
    $output = $input; 
  }
  
  return $output;
}

function _ldap_integration_login2dn($login) {
  $string = $login;
  $pattern = variable_get('ldap_login_pattern', LDAP_DEFAULT_PATTERN);
  $replacement = variable_get('ldap_login_replacement', LDAP_DEFAULT_REPLACEMENT);
  return preg_replace($pattern, $replacement, $string);
}

function _ldap_integration_save_pass($pass) {
  $_SESSION['ldap_pass'] = _ldap_integration_encrypt($pass);
}

function _ldap_integration_retrieve_pass() {
  return _ldap_integration_decrypt($_SESSION['ldap_pass']);
}

function _ldap_integration_attribute_form($attrname, $value, $info) {
  $type = array_shift($info);
  $title = array_shift($info);
  
  switch($type) {
    case 'textfield':
      $output = form_textfield($title, $attrname, $value, array_shift($info), array_shift($info), array_shift($info), array_shift($info), array_shift($info));
      break;
  }
  
  return $output;
}

/*********************************
 *          5. Themes            *
 *********************************/


function theme_ldap_integration_search_form() {
  $output  = '<form action="' . url('ldap_integration/query') . '" method="post">' . "\n";
  $output .= t('Enter partial name') . '<br />' . "\n";  
  $output .= '<input name="edit[ldap_searchstring]" size="16"/><br />' . "\n";
  $output .= '<input name="op" type="submit" value="'. t('Search') .'" /><br />' . "\n";
  $output .= '</form>' . "\n";
  
  return $output;
}

function theme_ldap_integration_results_list(&$results) {
  global $ldap_attributes, $ldap_cn;
  
  if (!$ldap_attributes) {
    ldap_integration_attributes();
  }

  $header = array();
  $activeattrs = variable_get('ldap_resultslist_attributes', array());
  foreach ($activeattrs as $attribute) {
    $header[] = array(
      'data' => $ldap_attributes[$attribute][2],
      'field' => $attribute);
  }
  
  $data = array();
  for ($i=0; $i<$results['count']; $i++) {
    $row = array();
    for ($j=0; $j<$results[$i]['count']; $j++) {
      $attribute = $header[$j]['field'];
      $row[$attribute] = $results[$i][$attribute][0];
    }    
    $data[] = $row;
  }

  return theme('table', $header, $data);
}

?>